import { useState, useEffect } from 'react';

export const UseEffect = () => {
	const [products, setProducts] = useState([]);

	useEffect(() => {
		fetch('https://mocki.io/v1/891b95d5-5ee6-4da7-96e8-8364c07749d4')
			.then((loadedData) => loadedData.json())
			.then((loadedProducts) => {
				setProducts(loadedProducts);
			});
	}, []);

	return (
		<>
			<section>
				<h2>UseEffect</h2>
				<p>
					Для работы с асинхронным кодом, в частности работы с http-запросами
					используется хук <code>useEffect()</code>
				</p>
				<p>
					С его помощью можно выполнять какой-то код на разных этапах жизненного
					цикла
				</p>
				<div className="code">
					{products.map(({ id, name, price }) => (
						<div key={id}>
							{name} - {price}руб
						</div>
					))}
				</div>
				<p>Методы жихненного цикла классовых компонентов:</p>
				<ul>
					<li>
						<b>Рендер</b> - выполнение кода, который возвращает JSX-разметку,
						которую браузер отобразит на странице.
					</li>
					<li>
						<b>Монтирование</b> - создание компонента, код которого начинает
						выполняться сразу после того, как компонент уже отрисовался в
						браузере, как бы означая момент, когда компонент уже создан.
					</li>
					<li>
						<b>Обновление</b> - изменения каких-то данных на странице, причём
						именно некоторых данных, а не всей страницы или всего приложения.
					</li>
					<li>
						<b>Размонтирование </b> - удаление компонента, оно может
						происходить, когда переходят со страницы, использующей компонент
						на другую, вообще уходят со страницы закрывая приложение, или
						когда компонент удаляют с помощью условного рендеринга.
					</li>
				</ul>
			</section>
		</>
	);
};
